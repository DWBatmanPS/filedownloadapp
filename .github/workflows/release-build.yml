name: Build and Push Docker Image

on:
  push:
    branches:
      - main

permissions:
  contents: read
  packages: write

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Create SSL certificate and key
        run: |
          mkdir -p ./ssl/private
          openssl genrsa -out ./ssl/private/secret.key 2048
          openssl req -new -x509 -key ./ssl/private/secret.key -out ./ssl/private/cert.cer -days 30 -subj "/CN=contoso.com"
  
      - name: Create .env file
        run: |
          echo "SSL_KEY=./ssl/private/secret.key" > .env
          echo "SSL_CERT=./ssl/private/cert.cer" >> .env
          echo "USESSL=true" >> .env
          echo "PORTHTTP=8080" >> .env
          echo "PORTHTTPS=8443" >> .env

      - name: Set up Node.js
        uses: actions/setup-node@v2
        with:
          node-version: '22' # Specify the Node.js version

      - name: Install dependencies
        run: npm install

      - name: Start the application
        run: sudo node src/index.js & echo $! > app.pid &

      - name: Wait for the application to start
        run: sleep 10 # Wait for 10 seconds to ensure the app is running

      - name: Test GET request with curl
        run: |
          RESPONSE=$(curl -k -o /dev/null -w "%{http_code}" https://localhost:8443/)
          echo "Response: $RESPONSE"
          EXPECTED_RESPONSE='200'
          if [ "$RESPONSE" != "$EXPECTED_RESPONSE" ]; then
            echo "Test failed: Response code is not 200"
            echo "Expected: $EXPECTED_RESPONSE"
            echo "Got: $RESPONSE"
            exit 1
          fi

      - name: Stop the application (SSL)
        run: |
          kill $(cat app.pid) || true # Kill the application using the saved PID
          rm -f app.pid # Clean up the PID file
      
      - name: Update .env file for HTTP
        run: |
          sed -i 's/^USESSL=true/USESSL=false/' .env
          sed -i 's/^PORTHTTPS=8443/PORTHTTPS=/' .env
          sed -i 's/^PORTHTTP=8080/PORTHTTP=8080/' .env

      # Test with USESSL=false (HTTP on port 80)
      - name: Start the application without SSL
        run: sudo node src/index.js & echo $! > app.pid & # Start the application in the background

      - name: Wait for the application to start (No SSL)
        run: sleep 10 # Wait for 10 seconds to ensure the app is running

      - name: Test POST request with curl (HTTP)
        run: |
          RESPONSE=$(curl -o /dev/null -k -w "%{http_code}" http://localhost:8080/)
          echo "Response: $RESPONSE"
          EXPECTED_RESPONSE='200'
          if [ "$RESPONSE" != "$EXPECTED_RESPONSE" ]; then
            echo "Test failed: Response code is not 200(No SSL)"
            echo "Expected: $EXPECTED_RESPONSE"
            echo "Got: $RESPONSE"
            exit 1
          fi

      - name: Stop the application (No SSL)
        run: |
          kill $(cat app.pid) || true # Kill the application using the saved PID
          rm -f app.pid # Clean up the PID file

      - name: Set lower case org name
        id: org-name
        run: echo "ORG_LC=$(echo ${{ github.repository_owner }} | tr '[:upper:]' '[:lower:]')" >> $GITHUB_ENV

      - name: Set lower case release version
        id: release_version
        run: echo "release_version=$(echo ${{ github.ref_name }} | tr '[:upper:]' '[:lower:]')" >> $GITHUB_ENV

      - name: Set repo name only
        run: echo "REPO_NAME_LC=$(echo $REPO_NAME | tr '[:upper:]' '[:lower:]')" >> $GITHUB_ENV
      

      - name: Build Docker image
        run: |
          docker build -t ghcr.io/${{ env.ORG_LC }}/${{ env.REPO_NAME_LC }}:prod-latest -t ghcr.io/${{ env.ORG_LC }}/${{ env.REPO_NAME_LC }}:prod-${{ env.release_version }} -t ghcr.io/${{ env.ORG_LC }}/${{ env.REPO_NAME_LC }}:latest .

      - name: Log in to GitHub Container Registry
        run: echo "${{ secrets.GITHUB_TOKEN }}" | docker login ghcr.io -u ${{ github.actor }} --password-stdin

      - name: Push Docker image
        run: |
          docker push ghcr.io/${{ env.ORG_LC }}/${{ env.REPO_NAME_LC }}:prod-latest
      
      - name: Push Docker image
        run: |
          docker push ghcr.io/${{ env.ORG_LC }}/${{ env.REPO_NAME_LC }}:prod-${{ env.release_version }}
    
      - name: Push Docker image
        run: |
          docker push ghcr.io/${{ env.ORG_LC }}/${{ env.REPO_NAME_LC }}:latest